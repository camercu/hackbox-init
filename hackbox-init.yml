---
# Ansible Playbook to install all desired tools on Kali hack box
# To run:
# sudo ansible-playbook -v -i localhost, --connection=local -e "ansible_python_interpreter=$(which python3)" hackbox-init.yml

- name: Initialize Kali Hack-Box
  hosts: all
  become: true
  gather_facts: false

  vars:
    user: kali
    packages:
      pip:
        install:
          - ansible-lint
          - httpie
          - keystone-engine # assembler framework
          - pip
          - pipx
          - pwntools
          - pyftpdlib
          - requests
          - unicorn # cpu emulator framework
          - updog # python http server replacement that supports ssl & file upload

      apt:
        pre_install:
          - apt-transport-https
          - curl
          - gnupg2
          - gpg
          - software-properties-common
        install:
          # - Paramspider
          # - amass
          # - anew
          # - anti-burl
          # - aquatone
          # - assetfinder
          # - dalfox
          # - default-libmysqlclient-dev
          # - dnsprobe
          # - dnsvalidator
          # - dotnet-sdk
          # - fbrobe
          # - gau
          # - getjs
          # - gf
          # - gowitness
          # - hakrawler
          # - httprobe
          # - kxss
          # - massdns
          # - monodevelop
          # - mosh
          # - nodejs
          # - projectdiscovery chaos
          # - projectdiscovery chaos-client
          # - projectdiscovery httpx
          # - projectdiscovery naabu
          # - projectdiscovery nuclei
          # - projectdiscovery shuffledns
          # - shellter  # AV-evasion by injecting malware into legit .exe
          # - sn0int
          # - subfinder
          # - subgen
          # - subjack
          # - urlprobe
          # - waybackurls
          # - zdns
          - apktool # Android APK RE tool
          - apt-transport-https
          - bettercap
          - binwalk
          - build-essential
          - capstone-tool
          - catdoc # text extractors for MS Office files
          - cewl
          - chisel
          - clang
          - clang-format
          - clang-tidy
          - clang-tools
          - code # VSCode
          - crackmapexec
          - curl # autorecon dependency
          - default-jre # to run Ghidra
          - default-mysql-client
          - dex2jar # Dalvik decompiler
          - dirb
          - docker
          - dsniff # sniff network traffic for cleartext insecurities
          - enum4linux # autorecon dependency
          - exploitdb
          - eyewitness # website snapshotting tool
          - fd-find
          - feroxbuster # autorecon dependency
          - ffuf # autorecon dependency, web fuzzer
          - flameshot # screenshot tool
          - fonts-wine
          - freerdp2-x11 # xfreerdp
          - fzf # dependency for custom hashcat mode finder
          - gcc-multilib
          - gdb-peda
          - ghidra
          - ghidra-data
          - git
          - gnome-screenshot
          - gobuster # autorecon dependency
          - hashcat
          - hashid
          - hydra
          - jd-gui
          - john
          - jq
          - libbz2-dev
          - libc6:i386
          - libcapstone-dev
          - libcapstone4
          - libffi-dev # pwntools dependency
          - libreadline-dev
          - libsqlite3-dev
          - libssl-dev # pwntools dependency
          - libwine
          - libwine:i386
          - masscan
          - metasploit-framework
          - mingw-w64
          - mitmproxy
          - nbtscan # autorecon dependency, scans IP networks for NetBIOS name information
          - ncat
          - neo4j
          - nikto # autorecon dependency
          - nmap # autorecon dependency
          - onesixtyone # autorecon dependency
          - openresolv # required for wireguard
          - openvpn
          - oscanner # autorecon dependency, Oracle enumeration tool
          - patator
          - perl
          - postgresql
          - powercat # powershell implementation of netcat
          - powershell-empire
          - proxify
          - proxychains
          - pure-ftpd
          - python3-capstone
          - python3-dev # pwntools dependency
          - python3-pefile
          - python3-pip
          - python3-venv
          - qemu
          - qemu-user
          - radare2
          - radare2-cutter
          - rinetd
          - ripgrep
          - rlwrap
          - ropper
          - rsync
          - seclists # autorecon dependency
          - sipvicious # autorecon dependency, used to audit SIP-based VoIP systems
          - smbclient # autorecon dependency
          - smbmap # autorecon dependency
          - smtp-user-enum # autorecon dependency
          - snmp # autorecon dependency, includes snmpwalk
          - snmp-mibs-downloader
          - snmpcheck
          - sqlmap
          - sqsh
          - sshfs
          - sshuttle
          - sslscan # autorecon dependency, audit SSL algorithms/cipher suites allowed
          - sslsniff
          - tcpdump
          - terminator
          - tmux
          - tnscmd10g # autorecon dependency, tool to talk to Oracle TNS listener on port 1521/tcp
          - vagrant
          - valgrind
          - vim
          # - virtualbox
          # - virtualbox-ext-pack
          - whatweb # autorecon dependency, recognize web technologies/plugins used by a site
          - wine
          - wine32
          - wine64
          - wireguard
          - wireshark
          - wkhtmltopdf # autorecon dependency, HTML to PDF rendering
          - xclip
          - zsh

    go:
      version_url: https://golang.org/VERSION?m=text

    firefox:
      extensions:
        - FoxyProxy Standard
        - Cookie-Editor

    pyenv:
      root: "/home/{{ user }}/.pyenv"
      repo_url: "https://github.com/pyenv/pyenv"
      release_api_url: >-
        https://api.github.com/repos/pyenv/pyenv/releases/latest
      python_ver: 2.7.18

    ohmyzsh:
      install_url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dir: "/home/{{ user }}/.oh-my-zsh"

    vscode:
      extensions:
        - bbenoist.vagrant
        - eamodio.gitlens
        - golang.go
        - hashicorp.terraform
        - infosec-intern.snort
        - matklad.rust-analyzer
        - ms-azuretools.vscode-docker
        - ms-python.python
        - ms-python.vscode-pylance
        - ms-toolsai.jupyter
        - ms-vscode-remote.vscode-remote-extensionpack
        - ms-vscode.cpptools-extension-pack
        - ms-vscode.cpptools-extension-pack
        - redhat.ansible
        - redhat.vscode-yaml
        - tamasfe.even-better-toml
        - vscjava.vscode-java-pack
        - vscode-icons-team.vscode-icons
        - vscodevim.vim
        - yzhang.markdown-all-in-one
        - zhuangtongfa.material-theme  # one dark pro theme
        - lfs.vscode-emacs-friendly

  tasks: # ******************************************************************
    - name: Apt full-upgrade
      ansible.builtin.apt:
        upgrade: full
        update_cache: true
        autoclean: true
        autoremove: true

    - name: Include Apt deb-src repos
      ansible.builtin.apt_repository:
        repo: deb-src http://http.kali.org/kali kali-rolling main contrib non-free
        state: present

    - name: Get foreign dpkg architectures
      ansible.builtin.command: dpkg --print-foreign-architectures
      register: dpkg_architectures
      changed_when: false # never shows as creating a change

    # - debug:
    #     var: dpkg_architectures.stdout

    - name: Add i386 architecture to dpkg
      ansible.builtin.command: dpkg --add-architecture i386
      when: "'i386' not in dpkg_architectures.stdout"

    - name: Install Apt tools for adding repos
      ansible.builtin.apt:
        name: "{{ packages.apt.pre_install }}"
        state: latest
        update_cache: true

    - name: Configure Microsoft Visual Studio Code Apt Repos
      tags:
        - vscode
      block:
        - name: Add Microsoft Apt Signing Key
          ansible.builtin.apt_key:
            url: https://packages.microsoft.com/keys/microsoft.asc
            keyring: /etc/apt/trusted.gpg.d/microsoft.gpg
            state: present
        - name: Add VSCode Apt Repo
          ansible.builtin.apt_repository:
            repo: deb https://packages.microsoft.com/repos/vscode stable main
            filename: vscode
            state: present

    - name: "Install apt packages: {{ packages.apt.install | join(', ') }}"
      ansible.builtin.apt:
        name: "{{ packages.apt.install }}"
        state: latest
        update_cache: true
      # notify: Restart services

    - name: Install latest release of Golang
      block:
        - name: Find latest release version of Go
          ansible.builtin.uri:
            method: GET
            url: "{{ go.version_url }}"
            follow_redirects: safe
            body_format: raw
            return_content: true
          register: latest_go_version
        # - debug:
        #     var: latest_go_version['content']
        - name: Download & Install latest version of Go
          ansible.builtin.unarchive:
            src: "https://golang.org/dl/{{ latest_go_version['content'] }}.linux-amd64.tar.gz"
            dest: /usr/local
            remote_src: true

    - name: Install Rust
      become_user: "{{ user }}"
      block:
        - name: "Check if Rust installed for {{ user }} user"
          ansible.builtin.stat:
            path: "/home/{{ user }}/.cargo"
          register: cargo_dir
        - name: Fetch rustup
          ansible.builtin.uri:
            url: https://sh.rustup.rs
            return_content: yes
          when: not cargo_dir.stat.exists
          register: rustup_installer
        - name: Run rustup installer
          ansible.builtin.command:
            cmd: sh -s -- -y
            stdin: "{{ rustup_installer.content }}"
          when: not cargo_dir.stat.exists

    # Pyenv lets us have python2 install alongside the default system python3
    - name: "Install & configure pyenv for {{ user }} user"
      become_user: "{{ user }}"
      block:
        - name: Find latest release version of pyenv
          ansible.builtin.uri:
            method: GET
            url: "{{ pyenv.release_api_url }}"
            follow_redirects: safe
            body_format: json
          register: pyenv_release_info
        - name: Download pyenv
          ansible.builtin.git:
            repo: "{{ pyenv.repo_url }}"
            dest: "{{ pyenv.root }}"
            depth: 1
            version: "{{ pyenv_release_info['json']['tag_name'] }}"
        - name: Install pyenv python version
          ansible.builtin.shell:
            cmd: |
              export PYENV_ROOT="$HOME/.pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"
              CFLAGS='-O2' pyenv install -s {{ pyenv.python_ver }}
            creates: "/home/{{ user }}/.pyenv/versions/{{ pyenv.python_ver }}"

    - name: "Install python packages: {{ packages.pip.install | join(', ') }}"
      become_user: "{{ user }}"
      ansible.builtin.pip:
        name: "{{ packages.pip.install }}"
        state: latest

    - name: Configure Oh-My-Zsh
      become_user: "{{ user }}"
      block:
        - name: "Installing Oh-My-Zsh for {{ user }} user"
          block:
            - name: "Check if Oh-My-Zsh installed for {{ user }} user"
              ansible.builtin.stat:
                path: "{{ ohmyzsh.dir }}"
              register: ohmyzsh_dir
            - name: Fetch oh-my-zsh
              ansible.builtin.uri:
                url: "{{ ohmyzsh.install_url }}"
                return_content: yes
              when: not ohmyzsh_dir.stat.exists
              register: ohmyzsh_installer
            - name: Run oh-my-zsh installer
              ansible.builtin.command:
                cmd: sh -s
                stdin: "{{ ohmyzsh_installer.content }}"
                creates: "{{ ohmyzsh.dir }}"
              when: not ohmyzsh_dir.stat.exists

        - name: Install zsh-autosuggestions plugin
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-autosuggestions
            dest: "/home/{{ user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

        - name: Install zsh-syntax-highlighting plugin
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-syntax-highlighting
            dest: "/home/{{ user }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

        - name: Install Powerlevel10k theme
          ansible.builtin.git:
            repo: https://github.com/romkatv/powerlevel10k.git
            dest: "/home/{{ user }}/.oh-my-zsh/custom/themes/powerlevel10k"

    - name: Install Meslo Nerd fonts
      ansible.builtin.uri:
        url: "{{ item }}"
        dest: /usr/local/share/fonts/
        creates: /usr/local/share/fonts/MesloLGS%20NF%20Regular.ttf
      loop:
        - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
        - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
        - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
        - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
      register: font_install

    - name: Install VSCode extensions
      become_user: "{{ user }}"
      ansible.builtin.command:
        cmd: "code --install-extension {{ item }}"
      loop: "{{ vscode.extensions }}"
      tags:
        - vscode

    - name: Checking if reboot required
      ansible.builtin.command: test -f /var/run/reboot-required
      failed_when: False
      register: reboot_required
      changed_when: reboot_required.rc == 0
      notify: Rebooting machine

  handlers:
    # - name: Restart services
    #   ansible.builtin.systemd:
    #     name: "{{ item }}"
    #     state: restarted
    #   loop: "{{ services.enable }}"

    - name: Refresh font cache
      ansible.builtin.command: fc-cache -fv
      when: font_install.changed

    - name: Rebooting machine
      ansible.builtin.reboot:
