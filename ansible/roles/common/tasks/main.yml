---
- name: Ensure user {{ user }} exists
  ansible.builtin.user:
    name: "{{ user }}"
    shell: /bin/zsh # way better than vanilla bash
    groups: sudo
    append: true # don't remove user from groups not listed in 'groups'
    generate_ssh_key: true
    update_password: on_create # keep user's password if already set
    password: "{{ 'changeme' | password_hash('sha512', 65536 | random(seed=user) | string) }}"

# To only regenerate ssh keys once per host, we touch a file when done.
# If the file exists, don't do regeneration routine
- name: Check for ssh-key touchfile
  ansible.builtin.stat:
    path: "{{ sshkey_touchfile }}"
  register: sshtf
  tags:
    - ssh

- name: Regenerate host ssh keys
  when: not sshtf.stat.exists
  tags:
    - ssh
  block:
    - name: Ensure openssh-server installed
      ansible.builtin.apt:
        name: openssh-server
        state: latest
        update_cache: true
    - name: Find existing ssh keys
      ansible.builtin.find:
        paths: "/etc/ssh"
        patterns: "ssh_host_*"
      register: sshkeys
    - name: Delete old ssh keys
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sshkeys.files }}"
    - name: Generate new host ssh keys
      ansible.builtin.command:
        cmd: dpkg-reconfigure openssh-server
        creates: /etc/ssh/ssh_host_rsa_key
    - name: Restart ssh server
      ansible.builtin.service:
        name: ssh
        state: restarted
    - name: Create ssh-key touchfile
      ansible.builtin.file:
        path: "{{ sshkey_touchfile }}"
        state: touch
        mode: 0640

- name: Apt full-upgrade
  ansible.builtin.apt:
    upgrade: full
    update_cache: true
    autoclean: true
    autoremove: true
  tags:
    - apt
    - update

- name: Include Apt deb-src repos
  ansible.builtin.apt_repository:
    repo: deb-src http://http.kali.org/kali kali-rolling main contrib non-free
    state: present
  when: ansible_facts.distribution == "Kali"
  tags:
    - apt

- name: Install Apt tools for adding repos
  ansible.builtin.apt:
    name: "{{ apt.pre_install }}"
    state: latest
    update_cache: false
  tags:
    - apt
    - update

- name: Configure Microsoft Visual Studio Code Apt Repos
  tags:
    - vscode
  block:
    - name: Add Microsoft Apt Signing Key
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        keyring: /etc/apt/trusted.gpg.d/microsoft.gpg
        state: present
    - name: Add VSCode Apt Repo
      ansible.builtin.apt_repository:
        repo: deb https://packages.microsoft.com/repos/vscode stable main
        filename: vscode
        state: present

- name: Install git-credential-manager
  tags:
    - gcm
    - apt
  block:
    - name: Get latest version of gcm
      ansible.builtin.uri:
        url: "{{ gcm.release_api_url }}"
      register: gcm_version
    - name: Install latest version of gcm
      ansible.builtin.apt:
        deb: "{{ gcm.deb_url_prefix }}/{{ gcm_version.json.tag_name }}/gcm-linux_amd64{{ gcm_version.json.tag_name | replace('v','.') }}.deb"
      notify: Configure git-credential-manager

- name: Get foreign dpkg architectures
  ansible.builtin.command: dpkg --print-foreign-architectures
  register: dpkg_architectures
  changed_when: false # never shows as creating a change
  tags:
    - apt
# - debug:
#     var: dpkg_architectures.stdout
- name: Add i386 architecture to dpkg
  ansible.builtin.command: dpkg --add-architecture i386
  when: "'i386' not in dpkg_architectures.stdout"
  tags:
    - apt

- name: "Install apt packages: {{ apt.install | join(', ') }}"
  ansible.builtin.apt:
    name: "{{ apt.install }}"
    state: latest
    update_cache: true
  notify: Update database for locate command
  tags:
    - apt
    - update

- name: Install dotfiles
  become_user: "{{ user }}"
  tags:
    - dotfiles
  block:
    - name: Download dotfiles repo
      ansible.builtin.git:
        repo: "{{ dotfiles.repo }}"
        dest: "{{ dotfiles.dir }}"
    - name: Set dotfiles installer as executable
      ansible.builtin.file:
        path: "{{ dotfiles.dir }}/install.sh"
        mode: 0750
    - name: Run dotfiles installer
      ansible.builtin.command:
        chdir: "{{ dotfiles.dir }}"
        cmd: "./install.sh"
        creates: "{{ homedir }}/.gitconfig-aliases"

- name: Install latest release of Golang
  tags:
    - go
    - golang
  block:
    - name: Check currently installed version of Go
      ansible.builtin.shell:
        cmd: "/usr/local/go/bin/go version | awk '{print $3}'"
      register: installed_go_version
      changed_when: installed_go_version.stdout
      failed_when: false
      become_user: "{{ user }}"
    - name: Find latest release version of Go
      ansible.builtin.uri:
        method: GET
        url: "{{ go.version_url }}"
        follow_redirects: safe
        body_format: raw
        return_content: true
      register: latest_go_version
    # - debug: latest_go_version.content
    # - debug: installed_go_version.stdout
    - name: Download & Install latest version of Go
      ansible.builtin.unarchive:
        src: "https://golang.org/dl/{{ latest_go_version['content'] }}.linux-amd64.tar.gz"
        dest: /usr/local
        remote_src: true
      when: latest_go_version.content != installed_go_version.stdout

- name: Install Rust
  become_user: "{{ user }}"
  tags:
    - rust
  block:
    - name: "Check if Rust installed for {{ user }} user"
      ansible.builtin.stat:
        path: "{{ homedir }}/.cargo"
      register: cargo_dir
    - name: Fetch rustup
      ansible.builtin.uri:
        url: https://sh.rustup.rs
        return_content: yes
      when: not cargo_dir.stat.exists
      register: rustup_installer
    - name: Run rustup installer
      ansible.builtin.command:
        cmd: sh -s -- -y
        stdin: "{{ rustup_installer.content }}"
      when: not cargo_dir.stat.exists

# Pyenv lets us have python2 install alongside the default system python3
- name: "Install & configure pyenv for {{ user }} user"
  become_user: "{{ user }}"
  tags:
    - pyenv
  block:
    - name: Install pyenv dependencies
      become_user: root
      ansible.builtin.apt:
        name: "{{ apt.pyenv_deps }}"
        state: latest
        update_cache: false
    - name: Find latest release version of pyenv
      ansible.builtin.uri:
        method: GET
        url: "{{ pyenv.release_api_url }}"
        follow_redirects: safe
        body_format: json
      register: pyenv_release_info
    - name: Download pyenv
      ansible.builtin.git:
        repo: "{{ pyenv.repo_url }}"
        dest: "{{ pyenv.root }}"
        depth: 1
        version: "{{ pyenv_release_info['json']['tag_name'] }}"
    - name: Install pyenv python version
      ansible.builtin.shell:
        cmd: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
          CFLAGS='-O2' pyenv install -s {{ pyenv.python_ver }}
        creates: "{{ homedir }}/.pyenv/versions/{{ pyenv.python_ver }}"
    - name: Validate pyenv configured in .zshrc
      ansible.builtin.lineinfile:
        path: "{{ homedir }}/.zshrc"
        line: "{{ item }}"
        state: present
      loop:
        - export PYENV_ROOT="$HOME/.pyenv"
        - export PATH="$PYENV_ROOT/bin:$PATH"
        - eval "$(pyenv init --path)"
        - eval "$(pyenv init -)"
    - name: Validate pyenv configured in .profile
      ansible.builtin.lineinfile:
        path: "{{ homedir }}/.profile"
        line: "{{ item }}"
        state: present
      loop:
        - export PYENV_ROOT="$HOME/.pyenv"
        - export PATH="$PYENV_ROOT/bin:$PATH"
        - eval "$(pyenv init --path)"

- name: "Install python packages: {{ pip.install | join(', ') }}"
  become_user: "{{ user }}"
  ansible.builtin.pip:
    name: "{{ pip.install }}"
    state: latest
  notify: Update database for locate command
  tags:
    - pip
    - update

- name: Configure Oh-My-Zsh
  become_user: "{{ user }}"
  tags:
    - zsh
    - ohmyzsh
  block:
    - name: "Installing Oh-My-Zsh for {{ user }} user"
      block:
        - name: "Check if Oh-My-Zsh installed for {{ user }} user"
          ansible.builtin.stat:
            path: "{{ ohmyzsh.dir }}"
          register: ohmyzsh_dir
        - name: Fetch oh-my-zsh
          ansible.builtin.uri:
            url: "{{ ohmyzsh.install_url }}"
            return_content: true
          when: not ohmyzsh_dir.stat.exists
          register: ohmyzsh_installer
        - name: Run oh-my-zsh installer
          ansible.builtin.command:
            cmd: sh -s
            stdin: "{{ ohmyzsh_installer.content }}"
            creates: "{{ ohmyzsh.dir }}"
          when: not ohmyzsh_dir.stat.exists

    - name: Install zsh-autosuggestions plugin
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ homedir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    - name: Install zsh-syntax-highlighting plugin
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting
        dest: "{{ homedir }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    - name: Install Powerlevel10k theme
      ansible.builtin.git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ homedir }}/.oh-my-zsh/custom/themes/powerlevel10k"

- name: Install Meslo Nerd fonts
  ansible.builtin.uri:
    url: "{{ item }}"
    dest: /usr/local/share/fonts/
    creates: /usr/local/share/fonts/MesloLGS%20NF%20Regular.ttf
  loop:
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
  notify: Refresh font cache
  tags:
    - zsh
    - fonts

- name: Install VSCode extensions
  become_user: "{{ user }}"
  ansible.builtin.command:
    cmd: "code --install-extension {{ item }}"
    creates: "{{ homedir }}/.vscode/extensions/{{ item }}-*"
  loop: "{{ vscode.extensions }}"
  tags:
    - vscode

- name: Checking if reboot required
  ansible.builtin.command: test -f /var/run/reboot-required
  failed_when: false
  register: reboot_required
  changed_when: reboot_required.rc == 0
  notify: Rebooting machine
